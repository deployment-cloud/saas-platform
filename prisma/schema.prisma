model Invitation {
  id        String   @id @default(cuid())
  email     String
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  role      String
  token     String   @unique
  expiresAt DateTime
  accepted  Boolean  @default(false)
  createdAt DateTime @default(now())
}
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  users        User[]
  createdAt    DateTime   @default(now())
  Shipment     Shipment[]
  invitations  Invitation[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("user")
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
}

model Shipment {
  id             String           @id @default(cuid())
  trackingNo     String           @unique
  status         String
  tenantId       String
  tenant         Tenant           @relation(fields: [tenantId], references: [id])
  createdAt      DateTime         @default(now())
  CourierBooking CourierBooking[]
}

model CourierBooking {
  id              String   @id @default(cuid())
  shipmentId      String
  carrier         String
  pickupAddress   Json
  deliveryAddress Json
  packageDetails  Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  shipment Shipment @relation(fields: [shipmentId], references: [id])
}
