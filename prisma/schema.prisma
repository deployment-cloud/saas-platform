generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqd3RfaWQiOjEsInNlY3VyZV9rZXkiOiJza19SVmhDZHZSNnlBeVV6MmVrclkwX2oiLCJhcGlfa2V5IjoiMDFLNlJQOUJRRFNWNFE3MjlUVFZRMVRHRU0iLCJ0ZW5hbnRfaWQiOiJmYmQ4NGM4MzIyNTJiZGI5YWNlNjY3ZDg4YjJlMjgzMDczYTEzMjY3ODZhODdjMzZhNDBmZTNiM2ZjZDk1M2M2IiwiaW50ZXJuYWxfc2VjcmV0IjoiMjU3OGVmZWEtZDVmZC00Zjg2LWFiMjUtMjUwYTU5NDNhNmJmIn0.9FfXyZrNUI6Lo59BMdX8kXwck2_5dKss7kaxaJSv0pw")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  users     User[]
  subscriptions Subscription[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitation {
  id         String   @id @default(cuid())
  email      String
  tenantId   String
  role       String   @default("USER")
  token      String   @unique
  expiresAt  DateTime
  accepted   Boolean  @default(false)
  createdAt  DateTime @default(now())

  tenant     Tenant   @relation(fields: [tenantId], references: [id])
}

model Subscription {
  id           String   @id @default(cuid())
  tenantId     String
  stripeCustId String?
  stripeSubId  String?
  status       String   @default("trialing")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant       Tenant   @relation(fields: [tenantId], references: [id])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String?
  role      String   @default("USER")
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Warehouse {
  id        String    @id @default(cuid())
  name      String
  location  String
  capacity  Int
  bookings  WarehouseBooking[]
}

model WarehouseBooking {
  id          String    @id @default(cuid())
  warehouseId String
  customerId  String
  startDate   DateTime
  endDate     DateTime
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  customer    User?      @relation(fields: [customerId], references: [id])
}

model CustomsBrokerageBooking {
  id             String    @id @default(cuid())
  shipmentId     String
  brokerName     String
  clearanceStatus String   @default("pending")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  shipment       Shipment?  @relation(fields: [shipmentId], references: [id])
}

model FreightBooking {
  id           String    @id @default(cuid())
  shipmentId   String
  freightMode  String
  containerType String?
  volumeCbM     Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CourierBooking {
  id               String   @id @default(cuid())
  shipmentId       String
  carrier          String
  pickupAddress    Json
  deliveryAddress  Json
  packageDetails   Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Shipment {
  id String @id @default(cuid())
  trackingNumber String? @unique
  status String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
