// --------------------------------------------------
//  Prisma Schema for SaaS Logistics Platform
//  Compatible with Accelerate + NextAuth + PostgreSQL
// --------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// --------------------------------------------------
//  MODELS
// --------------------------------------------------

model Tenant {
  id            String         @id @default(cuid())
  name          String
  domain        String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         User[]         @relation("TenantUsers")
  invitations   Invitation[]   @relation("TenantInvitations")
  shipments     Shipment[]     @relation("TenantShipments")
  subscriptions Subscription[] @relation("TenantSubscriptions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  tenantId      String?
  tenant        Tenant?   @relation("TenantUsers", fields: [tenantId], references: [id], onDelete: Cascade)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --------------------------------------------------
//  LOGISTICS MODELS
// --------------------------------------------------

model Shipment {
  id             String          @id @default(cuid())
  trackingNo     String          @unique
  origin         String
  destination    String
  status         String          @default("Pending")
  weight         Float?
  cost           Float?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  tenantId       String?
  tenant         Tenant?         @relation("TenantShipments", fields: [tenantId], references: [id], onDelete: Cascade)
  trackingEvents TrackingEvent[]
}

model TrackingEvent {
  id         String   @id @default(cuid())
  status     String
  location   String
  timestamp  DateTime @default(now())
  remarks    String?
  shipmentId String
  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
}

// --------------------------------------------------
//  INVITATION MODEL
// --------------------------------------------------

model Invitation {
  id        String   @id @default(cuid())
  email     String
  tenantId  String
  tenant    Tenant   @relation("TenantInvitations", fields: [tenantId], references: [id], onDelete: Cascade)
  role      String   @default("user")
  token     String   @unique
  expiresAt DateTime
  accepted  Boolean  @default(false)
  createdAt DateTime @default(now())
}

// --------------------------------------------------
//  STRIPE INTEGRATION (optional)
// --------------------------------------------------

model Subscription {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation("TenantSubscriptions", fields: [tenantId], references: [id], onDelete: Cascade)
  stripeCustomerId String
  stripeSubId      String
  status           String   @default("active")
  currentPeriodEnd DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
